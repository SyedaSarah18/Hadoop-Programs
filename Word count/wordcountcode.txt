package com.sathya;
import java.io.IOException;
import java.util.StringTokenizer;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Mapper;
public class WordCountMapper extends Mapper<LongWritable,Text,Text,IntWritable>
{
  @Override
  public void map(LongWritable key,Text value,Context context) throws IOException, InterruptedException
  {
      StringTokenizer st = new StringTokenizer(value.toString());
      while (st.hasMoreTokens()) 
      {
         context.write(new Text(st.nextToken()), new IntWritable(1));
      }
    }
}

package com.sathya;
import java.io.IOException;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Reducer;

public class WordCountReducer extends Reducer<Text,IntWritable,Text,IntWritable> 
{
      public void reduce(Text key, Iterable<IntWritable> values,Context context) throws IOException, InterruptedException
      {
      int sum = 0;
      for (IntWritable i : values) 
      {
        sum += i.get();
      }
            context.write(key, new IntWritable(sum));
    }
}

package com.sathya;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
public class WordCountDriver
{
	public static void main(String[] args) throws Exception 
	{
	    Configuration conf = new Configuration();
	    Job j = new Job(conf, "WordCountJob");
	    j.setJarByClass(WordCountDriver.class);
	    j.setMapperClass(WordCountMapper.class);
	    j.setReducerClass(WordCountReducer.class);
	    j.setOutputKeyClass(Text.class);
	    j.setOutputValueClass(IntWritable.class);
    	    FileInputFormat.addInputPath(j, new Path(args[0]));
	    FileOutputFormat.setOutputPath(j, new Path(args[1]));
	    System.exit(j.waitForCompletion(true) ? 0 : 1);
	  }
}
